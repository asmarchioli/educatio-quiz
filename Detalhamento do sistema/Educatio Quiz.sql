CREATE DATABASE Educatio_Quiz;

-- Criação dos ENUMs
CREATE TYPE ESCOLARIDADE AS ENUM ('Fundamental I', 'Fundamental II', 'Ensino Médio', 'Graduação', 'Pós-Graduação');
CREATE TYPE EXIBICAO AS ENUM('Público', 'Privado');
CREATE TYPE TIPOQUESTAO AS ENUM('Verdadeiro ou Falso', 'Preencher Lacuna', 'Multipla Escolha');
CREATE TYPE DIFICULDADE AS ENUM('FÁCIL', 'MÉDIO', 'DÍFICIL');

CREATE TABLE AREA(
	ID_AREA INT PRIMARY KEY, 
	NOME_AREA VARCHAR(75) NOT NULL
);

CREATE TABLE ALUNO(
	ID_ALUNO INT PRIMARY KEY,
	NOME VARCHAR(120) NOT NULL,
	EMAIL VARCHAR(255) NOT NULL,
	SENHA VARCHAR(50) NOT NULL,
	NIVEL_EDUCACIONAL ESCOLARIDADE NOT NULL,
	CONSTRAINT aluno_unq_email UNIQUE (EMAIL),
	CONSTRAINT aluno_unq_senha UNIQUE (SENHA)
);

CREATE TABLE PROFESSOR(
	ID_PROFESSOR INT PRIMARY KEY, 
	NOME VARCHAR(120) NOT NULL,
	EMAIL VARCHAR(255) NOT NULL,
	SENHA VARCHAR(50) NOT NULL,
	INSTITUICAO_ENSINO VARCHAR(200) NOT NULL,
	DESCRICAO_PROFISSIONAL TEXT NOT NULL,
	LATTES VARCHAR(50),
	AREA INT NOT NULL,

	CONSTRAINT professor_fk_area 
		FOREIGN KEY (AREA) REFERENCES AREA(ID_AREA),

	CONSTRAINT professor_unq_email UNIQUE (EMAIL),
	CONSTRAINT professor_unq_senha UNIQUE (SENHA)
);

CREATE TABLE QUIZ(
	ID_QUIZ INT PRIMARY KEY, 
    TITULO VARCHAR(255) NOT NULL,
	PIN_ACESSO VARCHAR(50) NOT NULL ,
	DESCRICAO TEXT,
	VISIBILIDADE EXIBICAO NOT NULL,
	NIVEL_EDUCACIONAL ESCOLARIDADE NOT NULL,
	PROFESSOR_CRIADOR INT NOT NULL,
	AREA INT NOT NULL,
	DATA_CRIACAO DATE NOT NULL,

	CONSTRAINT quiz_fk_professor 
		FOREIGN KEY (PROFESSOR_CRIADOR) 
		REFERENCES PROFESSOR(ID_PROFESSOR),

	CONSTRAINT quiz_fk_area 
		FOREIGN KEY (AREA) REFERENCES AREA(ID_AREA),

	CONSTRAINT quiz_unq_pin UNIQUE (PIN_ACESSO)
);
	
CREATE TABLE QUESTAO(
	ID_QUESTAO INT PRIMARY KEY, 
	ENUNCIADO TEXT NOT NULL UNIQUE,
	TIPO_QUESTAO TIPOQUESTAO NOT NULL,
	VISIBILIDADE EXIBICAO NOT NULL,
	NIVEL_EDUCACIONAL ESCOLARIDADE NOT NULL,
	NIVEL_DIFICULADADE DIFICULDADE NOT NULL,
	AREA INT NOT NULL,
	PROFESSOR_CRIADOR INT NOT NULL,

	CONSTRAINT questao_fk_professor 
		FOREIGN KEY (PROFESSOR_CRIADOR) 
		REFERENCES PROFESSOR(ID_PROFESSOR),

	CONSTRAINT questao_fk_area 
		FOREIGN KEY (AREA) REFERENCES AREA(ID_AREA),

	CONSTRAINT questao_unq_enunciado UNIQUE (ENUNCIADO)
);

CREATE TABLE ALTERNATIVA(
	ID_QUESTAO INT, 
	NUM_ALTERNATIVA INT,
	TEXTO_ALTERNATIVA VARCHAR(255) NOT NULL, 
	FLG_EH_CORRETA CHAR(1) NOT NULL,
	PRIMARY KEY (ID_QUESTAO, NUM_ALTERNATIVA),
		
	CONSTRAINT alternativa_fk_idquestao 
		FOREIGN KEY (ID_QUESTAO) REFERENCES QUESTAO(ID_QUESTAO),

	CONSTRAINT alternativa_chk_flgEhcorreta 
		CHECK(FLG_EH_CORRETA IN ('S', 'N'))
);

/*O campo TEXTO_ALTERNATIVA serve como enunciado das alternativas e como resposta da questão de preencher lacuna*/

CREATE TABLE PROFESSOR_AREA(
	ID_PROFESSOR INT,
	ID_AREA INT,
	PRIMARY KEY (ID_PROFESSOR, ID_AREA),

	CONSTRAINT profArea_fk_idprof
		FOREIGN KEY (ID_PROFESSOR) REFERENCES     PROFESSOR(ID_PROFESSOR),
	CONSTRAINT profArea_fk_idarea
		FOREIGN KEY (ID_AREA) REFERENCES AREA(ID_AREA)
);


CREATE TABLE QUIZ_QUESTAO(
	ID_QUESTAO INT ,
	ID_QUIZ INT,
	PONTUACAO_QUESTAO INT NOT NULL,
	PRIMARY KEY (ID_QUESTAO, ID_QUIZ),
	
	CONSTRAINT quizquest_fk_idquestao
		FOREIGN KEY (ID_QUESTAO) REFERENCES QUESTAO(ID_QUESTAO),
	CONSTRAINT quizquest_fk_idquiz
		FOREIGN KEY (ID_QUIZ) REFERENCES QUIZ(ID_QUIZ)
);

CREATE TABLE RESPOSTA(
	ID_RESPOSTA SERIAL PRIMARY KEY,
	ID_QUESTAO INT NOT NULL,
	ID_QUIZ INT NOT NULL,
	ID_ALUNO INT NOT NULL,
	TENTATIVA INT NOT NULL,
	PONTUACAO_ALUNO INT NOT NULL,
	FLG_ACERTOU CHAR(1) NOT NULL,
	
	CONSTRAINT resposta_unq_keycandicomposta
		UNIQUE(ID_QUESTAO, ID_QUIZ, ID_ALUNO, TENTATIVA),
	CONSTRAINT resposta_fk_idquestao
		FOREIGN KEY (ID_QUESTAO) REFERENCES QUESTAO(ID_QUESTAO),
	CONSTRAINT resposta_fk_idquiz
		FOREIGN KEY (ID_QUIZ) REFERENCES QUIZ(ID_QUIZ),
	CONSTRAINT resposta_fk_idaluno
		FOREIGN KEY (ID_ALUNO) REFERENCES ALUNO(ID_ALUNO),
	CONSTRAINT alternativa_chk_flgAcertou 
		CHECK(FLG_ACERTOU IN ('S', 'N'))
);

